const express = require('express');
const bodyParser = require('body-parser');

// Use dynamic import for node-fetch
const fetch = import('node-fetch').then(module => module.default);

const { Pool } = require('pg');
require('dotenv').config();

const app = express();
const port = process.env.PORT || 3000;

app.use(bodyParser.json());

const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.DATABASE_SSL === 'true' ? { rejectUnauthorized: false } : undefined,
});
  

app.get('/api/movies', async (req, res) => {
  try {
    const tmdbApiKey = process.env.TMDB_API_KEY;
    const tmdbEndpoint = `https://api.themoviedb.org/3/movie/popular?api_key=${tmdbApiKey}&language=en-US&page=1`;

    // Use dynamic import for fetch
    const { default: fetch } = await import('node-fetch');

    const tmdbResponse = await fetch(tmdbEndpoint);
    const tmdbData = await tmdbResponse.json();

    // Assume you have a 'movies' table in your PostgreSQL database
    const client = await pool.connect();
    const result = await client.query('SELECT * FROM movies');
    const databaseMovies = result.rows;
    client.release();

    // Merge data from TMDB and database
    const mergedMovies = tmdbData.results.map(tmdbMovie => {
      const databaseMovie = databaseMovies.find(dbMovie => dbMovie.tmdb_id === tmdbMovie.id);

      if (databaseMovie) {
        return {
          ...tmdbMovie,
          overview: databaseMovie.overview,
        };
      } else {
        return tmdbMovie;
      }
    });

    res.json(mergedMovies);
  } catch (error) {
    console.error('Error fetching movies:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
